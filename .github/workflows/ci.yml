name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - stable
          - beta
          - nightly
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/cache
          ~/.cargo/registry
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Run unit tests
      run: cargo test --lib --verbose
    
    - name: Run integration tests
      run: cargo test --test integration_tests --verbose
    
    - name: Run all tests
      run: cargo test --verbose
    
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
    
    - name: Check formatting
      run: cargo fmt --all -- --check
    
    - name: Run doctests
      run: cargo test --doc

  full_test_suite:
    name: Full Test Suite
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/cache
          ~/.cargo/registry
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Install Git (ensure latest version)
      run: |
        sudo apt-get update
        sudo apt-get install -y git
    
    - name: Run comprehensive test suite
      run: |
        echo "üß™ Running comprehensive test suite..."
        
        # Run all tests with verbose output
        echo "üìã Unit and integration tests..."
        cargo test --verbose --all-features
        
        # Run clippy with all features
        echo "üîç Linting with clippy..."
        cargo clippy --all-targets --all-features -- -D warnings
        
        # Check code formatting
        echo "üé® Checking code formatting..."
        cargo fmt --all -- --check
        
        # Build in release mode
        echo "üèóÔ∏è Building release version..."
        cargo build --release --verbose
        
        # Test binary functionality
        echo "‚ö° Testing binary functionality..."
        ./target/release/git-cli --version
        ./target/release/git-cli --help
        
        # Test in non-interactive mode (if git repo has changes)
        echo "ü§ñ Testing non-interactive mode..."
        if git status --porcelain | grep -q .; then
          echo "Changes detected, testing non-interactive mode..."
          # Note: This would normally fail in CI due to no staged changes
          # but we can test the argument parsing
          ./target/release/git-cli --no-interactive --emoji "‚ú®" --title "test: ci validation" --help || true
        fi
        
        echo "‚úÖ All tests completed successfully!"

  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install tarpaulin
      run: cargo install cargo-tarpaulin
    
    - name: Generate code coverage
      run: cargo tarpaulin --verbose --all-features --workspace --timeout 120 --out xml
    
    - name: Upload to codecov.io
      uses: codecov/codecov-action@v3
      with:
        fail_ci_if_error: true

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install audit
      run: cargo install cargo-audit
    
    - name: Run security audit
      run: cargo audit

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Build
      run: cargo build --release --verbose
    
    - name: Run tests
      run: cargo test --release --verbose
